var documenterSearchIndex = {"docs":
[{"location":"examples-realtime/#Realtime-Audio-Processing","page":"Examples - Realtime ","title":"Realtime Audio Processing","text":"","category":"section"},{"location":"examples-realtime/","page":"Examples - Realtime ","title":"Examples - Realtime ","text":"Here we demonstrate how to stream audio and apply modifications to the signal. We will vary the amplitude of the signal and apply a filter during a limited time window.","category":"page"},{"location":"examples-realtime/","page":"Examples - Realtime ","title":"Examples - Realtime ","text":"The real-time processing consist of a source, modifiers, and a sink. Sources generate the raw signal. Modifiers alter the signal they are applied to. Sinks are a destination for the signals, typically a sound card, but in this example we use a buffer.","category":"page"},{"location":"examples-realtime/","page":"Examples - Realtime ","title":"Examples - Realtime ","text":"First we load the required packages and specify the sample rate and number of audio channels.","category":"page"},{"location":"examples-realtime/","page":"Examples - Realtime ","title":"Examples - Realtime ","text":"using AuditoryStimuli, Unitful, Plots, Pipe\n\nsample_rate = 48000\naudio_channels = 2;\nsource_rms = 0.2","category":"page"},{"location":"examples-realtime/#Set-up-the-signal-pipeline-components","page":"Examples - Realtime ","title":"Set up the signal pipeline components","text":"","category":"section"},{"location":"examples-realtime/","page":"Examples - Realtime ","title":"Examples - Realtime ","text":"Next we open a connection with a sink. This would typically be a sound card, but that is not possible on a web site. Instead, for this website example we use a dummy sink.","category":"page"},{"location":"examples-realtime/","page":"Examples - Realtime ","title":"Examples - Realtime ","text":"sink = DummySampleSink(Float64, sample_rate, num_channels)\n\n# But on a real system you would use something like\n# a = PortAudio.devices()\n# sink = PortAudioStream(a[3], 0, 2)","category":"page"},{"location":"examples-realtime/","page":"Examples - Realtime ","title":"Examples - Realtime ","text":"We also need a source. Here we use a simple white noise source.","category":"page"},{"location":"examples-realtime/","page":"Examples - Realtime ","title":"Examples - Realtime ","text":"source = NoiseSource(Float64, Fs, num_channels, source_rms)","category":"page"},{"location":"examples-realtime/","page":"Examples - Realtime ","title":"Examples - Realtime ","text":"And we will apply one signal modifier. The first modifier adjusts the amplitude of the signal. We want the signal to ramp from silent to full intensity, so we set the initial value to 0.0 and the target value to 1.0, and the maximum change per frame to 0.01.","category":"page"},{"location":"examples-realtime/","page":"Examples - Realtime ","title":"Examples - Realtime ","text":"amp = Amplification(0,0, 1.0, 0.01)","category":"page"},{"location":"examples-realtime/#Run-the-real-time-audio-pipeline","page":"Examples - Realtime ","title":"Run the real-time audio pipeline","text":"","category":"section"},{"location":"examples-realtime/","page":"Examples - Realtime ","title":"Examples - Realtime ","text":"We will now read from the noise source in 1/100th second frames. This is then passed through the signal amplifier, then sent to the sink.","category":"page"},{"location":"examples-realtime/","page":"Examples - Realtime ","title":"Examples - Realtime ","text":"for frame = 1:300\n    @pipe read(source, 0.01u\"s\") |> modify(amp, _) |> write(sink, _)\nend","category":"page"},{"location":"examples-realtime/#Verify-the-output","page":"Examples - Realtime ","title":"Verify the output","text":"","category":"section"},{"location":"examples-realtime/","page":"Examples - Realtime ","title":"Examples - Realtime ","text":"plot(sink.buf)","category":"page"},{"location":"api/#Library","page":"API","title":"Library","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = AuditoryStimuli","category":"page"},{"location":"api/#Module","page":"API","title":"Module","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"AuditoryStimuli","category":"page"},{"location":"api/#AuditoryStimuli.AuditoryStimuli","page":"API","title":"AuditoryStimuli.AuditoryStimuli","text":"A Julia package for generating auditory stimuli.\n\n\n\n\n\n","category":"module"},{"location":"api/#Signal-generators","page":"API","title":"Signal generators","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CorrelatedNoiseSource\nNoiseSource\nHarmonicComplex","category":"page"},{"location":"api/#AuditoryStimuli.CorrelatedNoiseSource","page":"API","title":"AuditoryStimuli.CorrelatedNoiseSource","text":"CorrelatedNoiseSource(eltype, samplerate, nchannels, std, correlation)\n\nCorrelatedNoiseSource is a multi-channel (currently restricted to 2) noise signal generator.\n\nInputs\n\nsamplerate specifies the sample rate of the signal.  \nnchannels specifies the number of channels of the signal.  \nstd specifies the desired standard deviation of the signal.  \ncorrelation specifies the desired correlation between the signals.\n\nOutput\n\nSampleSource object\n\nExample\n\nsource_object = CorrelatedNoiseSource(Float64, 48000, 2, 0.3, 0.75)\ncn = read(source_object, 480)         # Specify number of samples of signal to generate\ncn = read(source_object, 50u\"ms\")     # Specify length of time of signal to generate\n\nIssues\n\nCurrently only supports 2 channels\n\n\n\n\n\n","category":"type"},{"location":"api/#AuditoryStimuli.NoiseSource","page":"API","title":"AuditoryStimuli.NoiseSource","text":"NoiseSource(eltype, samplerate, nchannels, std)\n\nNoiseSource is a multi-channel noise signal generator. The noise on each channel is independent.\n\nInputs\n\nsamplerate specifies the sample rate of the signal.  \nnchannels specifies the number of channels of the signal.  \nstd specifies the desired standard deviation of the signal.  \n\nOutput\n\nSampleSource object\n\nExample\n\nsource_object = NoiseSource(Float64, 48000, 2, 0.3)\nwn = read(source_object, 480)         # Specify number of samples of signal to generate\nwn = read(source_object, 50u\"ms\")     # Specify length of time of signal to generate\n\n\n\n\n\n","category":"type"},{"location":"api/#AuditoryStimuli.HarmonicComplex","page":"API","title":"AuditoryStimuli.HarmonicComplex","text":"HarmonicComplex(eltype, samplerate, freqs)\n\nHarmonicComplex is a single-channel sine-tone signal generator. freqs can be an array of frequencies for a multi-frequency source, or a single frequency for a mono source.\n\n\n\n\n\n","category":"type"},{"location":"api/#Online-signal-modifiers","page":"API","title":"Online signal modifiers","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Amplification","category":"page"},{"location":"api/#AuditoryStimuli.Amplification","page":"API","title":"AuditoryStimuli.Amplification","text":"Amplification(target_amplification, current_amplifcation, amplification_change_limit)\n\nApply amplification to the signal\n\nInputs\n\ntarget_amplification the desired linear amplification factor to be applied to signal.\ncurrent_amplification the linear amplification currently applied to signal. Also used to specify the intial value for the process.\namplification_step_change_limit the maximum change in amplfication that can occur per frame.\n\nOutput\n\nSampleBuf \n\nExample\n\namplify = Amplification(0.1, 0.0, 0.05)\nattenuated_sound = write(amplify, original_sound)\n\n\n\n\n\n","category":"type"},{"location":"api/#Signal-modifiers","page":"API","title":"Signal modifiers","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"bandpass_noise\nbandpass_filter\nramp_on\nramp_off\nset_RMS\nset_ITD\namplitude_modulate\nITD_modulate","category":"page"},{"location":"api/#AuditoryStimuli.bandpass_noise","page":"API","title":"AuditoryStimuli.bandpass_noise","text":"bandpass_noise(number_samples, number_channels, lower_bound, upper_bound, sample_rate; filter_order=14)\n\nGenerates band pass noise with specified upper and lower bounds using a butterworth filter.\n\n\n\n\n\n","category":"function"},{"location":"api/#AuditoryStimuli.bandpass_filter","page":"API","title":"AuditoryStimuli.bandpass_filter","text":"bandpass_filter(AbstractArray, lower_bound, upper_bound, sample_rate; filter_order=14)\nbandpass_filter(SampledSignal, lower_bound, upper_bound;              filter_order=14)\n\nSignal will be filtered with bandpass butterworth filter between 'lowerbound' and `upperboundwith filter offilter_order`.\n\n\n\n\n\n","category":"function"},{"location":"api/#AuditoryStimuli.ramp_on","page":"API","title":"AuditoryStimuli.ramp_on","text":"ramp_on(data, number_samples)\n\nApply a linear ramp to start of signal\n\n\n\n\n\n","category":"function"},{"location":"api/#AuditoryStimuli.ramp_off","page":"API","title":"AuditoryStimuli.ramp_off","text":"ramp_off(data, number_samples)\n\nApply a linear ramp to end of signal\n\n\n\n\n\n","category":"function"},{"location":"api/#AuditoryStimuli.set_RMS","page":"API","title":"AuditoryStimuli.set_RMS","text":"set_RMS(data, desired_rms)\n\nModify rms of signal to desired value\n\n\n\n\n\n","category":"function"},{"location":"api/#AuditoryStimuli.set_ITD","page":"API","title":"AuditoryStimuli.set_ITD","text":"set_ITD(data, number_samples)\n\nIntroduce an ITD of number_samples\n\n\n\n\n\n","category":"function"},{"location":"api/#AuditoryStimuli.amplitude_modulate","page":"API","title":"AuditoryStimuli.amplitude_modulate","text":"amplitude_modulate(data, modulation_frequency, sample_rate; phase=Ï€)\n\nAmplitude modulates the signal\n\nSee wikipedia\n\n\n\n\n\n","category":"function"},{"location":"api/#AuditoryStimuli.ITD_modulate","page":"API","title":"AuditoryStimuli.ITD_modulate","text":"ITD_modulate(data, modulation_frequency, ITD_1, ITD_2, samplerate)\n\nModulate an applied ITD\n\n\n\n\n\n","category":"function"},{"location":"api/#Plotting","page":"API","title":"Plotting","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"PlotSpectroTemporal","category":"page"},{"location":"api/#AuditoryStimuli.PlotSpectroTemporal","page":"API","title":"AuditoryStimuli.PlotSpectroTemporal","text":"PlotSpectroTemporal(data, sample_rate)\n\nThis function plots the time, spectrogram, and periodogram of a signal\n\n\n\n\n\n","category":"function"},{"location":"examples/#Examples","page":"Examples - Offline","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples - Offline","title":"Examples - Offline","text":"In this section we demonstrate some common auditory signals you may wish to generate.","category":"page"},{"location":"examples/","page":"Examples - Offline","title":"Examples - Offline","text":"The examples below all begin with the following imports and default settings.","category":"page"},{"location":"examples/","page":"Examples - Offline","title":"Examples - Offline","text":"using AuditoryStimuli, Unitful, Plots\nusing Random; Random.seed!(0)\n\nsample_rate = 48000\naudio_channels = 2;","category":"page"},{"location":"examples/#Bandpass-noise-signal","page":"Examples - Offline","title":"Bandpass noise signal","text":"","category":"section"},{"location":"examples/","page":"Examples - Offline","title":"Examples - Offline","text":"using AuditoryStimuli, Unitful, Plots # hide\nusing Random; Random.seed!(0) # hide\nsample_rate = 48000 # hide\naudio_channels = 2 # hide\n\nnoise_source = CorrelatedNoiseSource(Float64, sample_rate, audio_channels, 0.3, 0.8)\ncorrelated_noise = read(noise_source, 1.6u\"s\")\nfiltered_noise = bandpass_filter(correlated_noise, 300u\"Hz\", 700u\"Hz\")\nsound_signal = set_RMS(amplitude_modulate(filtered_noise, 10u\"Hz\"), 0.2)\nPlotSpectroTemporal(sound_signal, time_limits = [1.2, 1.5], figure_size=(800, 400))","category":"page"},{"location":"examples/#Noise-with-ITD","page":"Examples - Offline","title":"Noise with ITD","text":"","category":"section"},{"location":"examples/","page":"Examples - Offline","title":"Examples - Offline","text":"using AuditoryStimuli, Unitful, Plots # hide\nusing Random; Random.seed!(0) # hide\nsample_rate = 48000 # hide\naudio_channels = 2 # hide\n\nnoise_source = CorrelatedNoiseSource(Float64, sample_rate, audio_channels, 0.3, 0.8)\ncorrelated_noise = read(noise_source, 1.5u\"s\")\nfiltered_noise = bandpass_filter(correlated_noise, 300u\"Hz\", 700u\"Hz\")\nmodulated_noise = amplitude_modulate(filtered_noise, 40u\"Hz\")\nit = set_ITD(modulated_noise, -24)\n\ntime = 1:size(it, 1); time = time ./ sample_rate\na = plot(time, it, lab = \"\", xlab = \"Time (s)\", ylab = \"Amplitude\", xlims = (0.0, 0.5))\nb = plot(time, it, lab = map(string,[:Left :Right]), xlab = \"Time (s)\", ylab = \"\", xlims = (0.025, 0.05))\nplot(a, b, size = (800, 300))","category":"page"},{"location":"examples/#Harmonic-Complex","page":"Examples - Offline","title":"Harmonic Complex","text":"","category":"section"},{"location":"examples/","page":"Examples - Offline","title":"Examples - Offline","text":"using AuditoryStimuli, Unitful, Plots # hide\nusing Random; Random.seed!(0) # hide\nsample_rate = 48000 # hide\naudio_channels = 2 # hide\n\nsource = HarmonicComplex(Float64, 48000, collect(200:200:2400))\nsound = read(source, 6u\"s\")\nsound = amplitude_modulate(sound, 15u\"Hz\")\nsound = set_RMS(sound, 0.1)\nPlotSpectroTemporal(sound, frequency_limits = [0, 3000], time_limits = [0.135, 0.33], amplitude_limits = [-0.6, 0.6], figure_size=(800, 400))","category":"page"},{"location":"#AuditoryStimuli.jl","page":"Home","title":"AuditoryStimuli.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package for generating auditory stimuli.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install this package enter the package manager by pressing ] at the julia prompt and enter:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add AuditoryStimuli","category":"page"}]
}
